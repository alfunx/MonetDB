stdout of test 'basic` in directory 'geom/sql` itself:


# 20:49:35 >  
# 20:49:35 >   mserver5 "--config=/home/sjoerd/Monet/etc/monetdb5.conf" --debug=10 --set gdk_nr_threads=0 --set "monet_mod_path=/home/sjoerd/src/MonetDB/devel/geom/x86_64-unknown-linux-gnu/src/monetdb5/.libs:/home/sjoerd/src/MonetDB/devel/geom/x86_64-unknown-linux-gnu/src/monetdb5:/home/sjoerd/Monet/lib64/MonetDB5:/home/sjoerd/Monet/lib64/MonetDB5/lib:/home/sjoerd/Monet/lib64/MonetDB5/bin:/home/sjoerd/Monet/lib64/MonetDB5:/home/sjoerd/Monet/lib64/MonetDB5/lib:/home/sjoerd/Monet/lib64/MonetDB5/bin" --set "gdk_dbfarm=/home/sjoerd/src/MonetDB/devel/geom/x86_64-unknown-linux-gnu/dbfarm" --set "sql_logdir=/home/sjoerd/src/MonetDB/devel/geom/x86_64-unknown-linux-gnu/sql_logs" --set "xquery_logdir=/home/sjoerd/src/MonetDB/devel/geom/x86_64-unknown-linux-gnu/xquery_logs" --set mapi_open=true --set xrpc_open=true --set mapi_port=38689 --set xrpc_port=41370 --set monet_prompt= --trace  "--dbname=mTests_src_sql" --set mal_listing=0 "--dbinit=include geom; include sql;" ; echo ; echo Over..
# 20:49:35 >  

# MonetDB server v5.7.0, based on kernel v1.25.0
# Serving database 'mTests_src_sql', using 2 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008- MonetDB B.V., all rights reserved
# Visit http://monetdb.cwi.nl/ for further information
# Listening for connection requests on mapi:monetdb://koolmees.mullender.nl:38689/
# MonetDB/GIS module v0.5.0 loaded
# MonetDB/SQL module v2.25.0 loaded

Ready.
#function user.main():void;
#    clients.quit();
#end main;


# 09:07:41 >  
# 09:07:41 >  Mtimeout -timeout 60 MapiClient -lsql -umonetdb -Pmonetdb --host=koala --port=34403 
# 09:07:41 >  

[ 1	]
[ 1	]
[ 1	]
[ 1	]
[ 1	]
% sys.geoms # table_name
% g # name
% geometry # type
% 0 # length
[ "POINT (10 10)"	]
[ "LINESTRING (10 10, 20 20, 30 40)"	]
[ "POLYGON ((10 10, 10 20, 20 20, 20 15, 10 10))"	]
[ "POLYGON ((10 10, 10 20, 20 20, 20 15, 10 10), (15 15, 15 20, 10 15, 15 15))"	]
[ NULL	]
% sys.geoms # table_name
% g # name
% geometry # type
% 0 # length
[ "POINT (10 10)"	]
[ "LINESTRING (10 10, 20 20, 30 40)"	]
[ "POLYGON ((10 10, 10 20, 20 20, 20 15, 10 10))"	]
[ "POLYGON ((10 10, 10 20, 20 20, 20 15, 10 10), (15 15, 15 20, 10 15, 15 15))"	]
#SELECT CASE WHEN Dimension(g) IN (0,1,2) THEN 3 ELSE Dimension(g) END, GeometryTypeId(g), SRID(g), Envelope(g) FROM geoms where g is not NULL;
% sys.L3,	sys.L4,	sys.L5,	sys.L5 # table_name
% L3,	L4,	L5,	envelope_g # name
% int,	int,	int,	geometry # type
% 1,	1,	1,	0 # length
[ 3,	0,	0,	"POINT (10 10)"	]
[ 3,	1,	0,	"POLYGON ((10 10, 30 10, 30 40, 10 40, 10 10))"	]
[ 3,	3,	0,	"POLYGON ((10 10, 20 10, 20 20, 10 20, 10 10))"	]
[ 3,	3,	0,	"POLYGON ((10 10, 20 10, 20 20, 10 20, 10 10))"	]
#SELECT IsEmpty(g), IsSimple(g), Boundary(g) FROM geoms where g is not NULL;
% sys.L1,	sys.L2,	sys.L2 # table_name
% L1,	L2,	boundary_g # name
% boolean,	boolean,	geometry # type
% 5,	5,	0 # length
[ false,	true,	"GEOMETRYCOLLECTION EMPTY"	]
[ false,	true,	"MULTIPOINT (10 10, 30 40)"	]
[ false,	true,	"LINESTRING (10 10, 10 20, 20 20, 20 15, 10 10)"	]
[ false,	true,	"MULTILINESTRING ((10 10, 10 20, 20 20, 20 15, 10 10), (15 15, 15 20, 10 15, 15 15))"	]

# 09:07:41 >  
# 09:07:41 >  Done.
# 09:07:41 >  

