# Test of CREDIT cache policy in limited memory (8 RU)
# Evicts the leaf instruction with smallest credit= cnt*(0.5*ticks + 0.5(wr+rd))

module sql;
function sql.mvc():int;
    return mvc:=1;
end mvc;

function sql.tid(mvc:int,s:str,t:str):bat[:oid];
b:= bat.new(:oid);
barrier i:= 0:oid;
    bat.append(b,i);
    redo i:= iterator.next(1:oid,1000:oid);
exit i;
    return tid:= b;
end tid;

function sql.bind(m:int,s:str,t:str,c:str,i:int):bat[:int];
b:= bat.new(:int);
barrier i:= 0:int;
    bat.append(b,i);
    redo i:= iterator.next(1:int,1000:int);
exit i;
return bind:=b;
end bind;

function qry(low:int, hgh:int);
    m:= sql.mvc();
    x:bat[:oid]  := sql.tid(m,"sys","tbl");
    b:bat[:int]:= sql.bind(m,"sys","tbl","col",0);
    s1:= algebra.subselect(b,x,low,hgh,true,true,false);
end qry;

recycle.setCache(4);
optimizer.recycler("user","qry");

io.print("start");
qry(100,150);
qry(200,240);
qry(700,720);
qry(800,900);
qry(700,720);
recycle.dump();
# The next query should evict the cheapest 2 selects(#2 and #4). 
qry(300,800);
recycle.dump();
