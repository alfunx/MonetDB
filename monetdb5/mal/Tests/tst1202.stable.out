stdout of test 'tst1202` in directory 'monetdb5/mal` itself:


# 15:36:11 >  
# 15:36:11 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=33827" "--set" "mapi_usock=/var/tmp/mtest-16148/.s.monetdb.33827" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/export/scratch1/mk/default//Linux/var/MonetDB/mTests_monetdb5_mal" "--set" "mal_listing=2" "--set" "embedded_r=yes"
# 15:36:11 >  

# MonetDB 5 server v11.22.0
# This is an unreleased version
# Serving database 'mTests_monetdb5_mal', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs and 128bit integers dynamically linked
# Found 15.589 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://vienna.da.cwi.nl:33827/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-16148/.s.monetdb.33827
# MonetDB/GIS module loaded
# Start processing logs sql/sql_logs version 52200
# Start reading the write-ahead log 'sql_logs/sql/log.4'
# Finished reading the write-ahead log 'sql_logs/sql/log.4'
# Finished processing logs sql/sql_logs
# MonetDB/SQL module loaded
# MonetDB/R   module loaded

Ready.

# 15:36:11 >  
# 15:36:11 >  "mclient" "-lmal" "-ftest" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-16148" "--port=33827"
# 15:36:11 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information.
##       rule_jan:= rule("1st MON from start of JAN@01:15");
##	rule_mar:= rule("first WEDNE on or after march 10@01:15");
#        rule_apr:= rule("last THU on or before aPr 1@01:15");
##        rule_may:= rule("MAY 26@01:15");
##        rule_jun:= rule("2nd TUE from end of june@01:15");
##        rule_jul:= rule(7,1,1,75);
##        rule_aug:= rule(8,-1,1,75);
##        rule_sep:= rule(9,-10,3,75);
##        rule_oct:= rule(10,31,0,75);
#        rule_nov:= rule(11,-10,-4,75);
##        rule_dec:= rule(12,-31,0,75);
##        rule_feb:= rule("first fRiDaY on or after february 30@01:15");
#
## Predefined code segment
##
###line 531 "/ufs/mk/monet_5-0/src/modules/atoms/monettime.mx"
##module(monettime,alarm);
##
##
##
#lzone:= mtime.timezone("GMT+1");
#mtime.timezone_local(lzone);
###line 535 "/ufs/mk/monet_5-0/src/modules/atoms/monettime.mx"
### test the various ways to create rules
#	rule_jan:= mtime.rule("1st MON from start of JAN@01:15");
##var rule_jan := mtime.rule("1st MON from start of JAN@01:15");
#	rule_mar:= mtime.rule("first WEDNE on or after march 10@01:15");
##var rule_mar := mtime.rule("first WEDNE on or after march 10@01:15");
#	rule_apr:= mtime.rule("last THU on or before aPr 1@01:15");
##var rule_apr := mtime.rule("last THU on or before aPr 1@01:15");
#	rule_may:= mtime.rule("MAY 26@01:15");
##var rule_may := mtime.rule("MAY 26@01:15");
#	rule_jun:= mtime.rule("2nd TUE from end of june@01:15");
##var rule_jun := mtime.rule("2nd TUE from end of june@01:15");
#	rule_jul:= mtime.rule(7,1,1,75);
##var rule_jul := mtime.rule(7,1,1,75);
#	rule_aug:= mtime.rule(8,-1,1,75);
##var rule_aug := mtime.rule(8,-1,1,75);
#	rule_sep:= mtime.rule(9,-10,3,75);
##var rule_sep := mtime.rule(9,-10,3,75);
#	rule_oct:= mtime.rule(10,31,0,75);
##var rule_oct := mtime.rule(10,31,0,75);
#	rule_nov:= mtime.rule(11,-10,-4,75);
##var rule_nov := mtime.rule(11,-10,-4,75);
### nil rules
#	rule_dec:= mtime.rule(12,-31,0,75);
##var rule_dec := mtime.rule(12,-31,0,75);
#	rule_feb:= mtime.rule("first fRiDaY on or after february 30@01:15");
##var rule_feb := mtime.rule("first fRiDaY on or after february 30@01:15");
## 
#	rule_bat:= bat.new(:str,:zrule,10);
##var rule_bat := bat.new(str,rule,10);
#	bat.insert(rule_bat,"jan",rule_jan);
#	bat.insert(rule_bat,"feb",rule_feb);
#	bat.insert(rule_bat,"mar",rule_mar);
#	bat.insert(rule_bat,"apr",rule_apr);
##rule_bat.bat.insert("jan",rule_jan).insert("feb",rule_feb).insert("mar",rule_mar).insert("apr",rule_apr);
#	bat.insert(rule_bat,"may",rule_may);
#	bat.insert(rule_bat,"jun",rule_jun);
#	bat.insert(rule_bat,"jul",rule_jul);
#	bat.insert(rule_bat,"aug",rule_aug);
##rule_bat.bat.insert("may",rule_may).insert("jun",rule_jun).insert("jul",rule_jul).insert("aug",rule_aug);
#	bat.insert(rule_bat,"sep",rule_sep);
#	bat.insert(rule_bat,"oct",rule_oct);
#	bat.insert(rule_bat,"nov",rule_nov);
#	bat.insert(rule_bat,"dec",rule_dec);
##rule_bat.bat.insert("sep",rule_sep).insert("oct",rule_oct).insert("nov",rule_nov).insert("dec",rule_dec);
##
##
###line 580 "/ufs/mk/monet_5-0/src/modules/atoms/monettime.mx"
### test the various ways to create timezones, using some of the above created rules
#	tzone_00:= mtime.timezone("GMT");
##var tzone_00 := mtime.timezone("GMT");
#	tzone_01:= mtime.timezone("GMT+01:00");
##var tzone_01 := mtime.timezone("GMT+01:00");
#	tzone_02:= mtime.timezone("GMT+0100");
##var tzone_02 := mtime.timezone("GMT+0100");
#	tzone_03:= mtime.timezone(60,rule_oct,rule_mar);
##var tzone_03 := mtime.timezone(60, rule_oct, rule_mar);
#	tzone_04:= mtime.timezone(0,rule_jan,rule_aug);
##var tzone_04 := mtime.timezone(0, rule_jan, rule_aug);
#	tzone_05:= mtime.timezone(-97,rule_oct,rule_apr);
##var tzone_05 := mtime.timezone(-97, rule_oct, rule_apr);
#	tzone_06:= mtime.timezone(-97,rule_may,rule_sep);
##var tzone_06 := mtime.timezone(-97, rule_may, rule_sep);
#	mc_a := calc.*(23,60);
#	tzone_07:= mtime.timezone(mc_a,rule_apr,rule_nov);
##var tzone_07 := mtime.timezone(23*60, rule_apr, rule_nov);
#	nc_a := calc.*(-23,59);
#	oc_a := calc.-(nc_a,59);
#	tzone_08:= mtime.timezone(oc_a);
##var tzone_08 := mtime.timezone((-23*59) - 59);
#	tzone_09:= mtime.timezone(0);
##var tzone_09 := mtime.timezone(0);
#	tzone_10:= mtime.timezone(-60);
##var tzone_10 := mtime.timezone(-60);
#	pc_a := calc.*(23,60);
#	qc_a := calc.+(pc_a,59);
#	tzone_11:= mtime.timezone(qc_a);
##var tzone_11 := mtime.timezone((23*60)+59);
#	tzone_12:= mtime.timezone(60);
##var tzone_12 := mtime.timezone(60);
### nil tzones
#	tzone_13:= mtime.timezone(60,rule_feb,rule_dec);
##var tzone_13 := mtime.timezone(60, rule_feb, rule_dec);
#	rc_a := calc.*(24,60);
#	tzone_15:= mtime.timezone(rc_a,rule_apr,rule_nov);
##var tzone_15 := mtime.timezone(24*60, rule_apr, rule_nov);
##
##
#	tzone_bat:= bat.new(:oid,:timezone);
##var tzone_bat := bat.new(oid,tzone);
#	bat.insert(tzone_bat,0@0,tzone_00);
#	bat.insert(tzone_bat,1@0,tzone_01);
#	bat.insert(tzone_bat,2@0,tzone_02);
##tzone_bat.bat.insert(0@0, tzone_00).insert(1@0, tzone_01).insert(2@0, tzone_02);
#	bat.insert(tzone_bat,3@0,tzone_03);
#	bat.insert(tzone_bat,4@0,tzone_04);
#	bat.insert(tzone_bat,5@0,tzone_05);
##tzone_bat.bat.insert(3@0, tzone_03).insert(4@0, tzone_04).insert(5@0, tzone_05);
#	bat.insert(tzone_bat,6@0,tzone_06);
#	bat.insert(tzone_bat,7@0,tzone_07);
#	bat.insert(tzone_bat,8@0,tzone_08);
##tzone_bat.bat.insert(6@0, tzone_06).insert(7@0, tzone_07).insert(8@0, tzone_08);
#	bat.insert(tzone_bat,9@0,tzone_09);
#	bat.insert(tzone_bat,10@0,tzone_10);
#	bat.insert(tzone_bat,11@0,tzone_11);
##tzone_bat.bat.insert(9@0, tzone_09).insert(10@0, tzone_10).insert(11@0, tzone_11);
#	bat.insert(tzone_bat,12@0,tzone_12);
#	bat.insert(tzone_bat,13@0,tzone_13);
#	bat.insert(tzone_bat,15@0,tzone_15);
##tzone_bat.bat.insert(12@0, tzone_12).insert(13@0, tzone_13).insert(15@0, tzone_15);
##
### test the operations on tzones
#	bat.setName(tzone_bat,"timezone");
##io.print(tzone_bat);
##io.print("start error");
#	#x:= getRefCount(tzone_bat);
##io.print(x);
#	#jd_a := io.print(tzone_bat);
##io.print("end");
##io.print(x);
#	#x:= getRefCount(tzone_bat);
#io.print("tzone_bat");
[ "tzone_bat" ]
#-----------------------------------------------------------------------------------------------------------------#
# h	t													  # name
# void	timezone  # type
#--------------------------#
[ 0@0,	"GMT"	]
[ 1@0,	"GMT+01:00"	]
[ 2@0,	"GMT+01:00"	]
[ 3@0,	"GMT+01:00-DST[october 31@01:15,first wednesday on or after march 26@01:15]"	]
[ 4@0,	"GMT-DST[17th monday from start of january@01:15,31th sunday from start of august@01:15]"	]
[ 5@0,	"GMT-01:37-DST[october 31@01:15,first thursday on or after april 31@01:15]"	]
[ 6@0,	"GMT-01:37-DST[may 26@01:15,22th tuesday from start of september@01:15]"	]
[ 7@0,	"GMT+23:00-DST[first thursday on or after april 31@01:15,first wednesday on or after november 22@01:15]"	]
[ 8@0,	"GMT-23:36"	]
[ 9@0,	"GMT"	]
[ 10@0,	"GMT-01:00"	]
[ 11@0,	"GMT+23:59"	]
[ 12@0,	"GMT+01:00"	]
[ 13@0,	  nil													  ]
[ 14@0,	nil  ]
[ "print(kd_a,md_a,od_a)" ]
#-------------------------------------------------------------------------------------------------------------------------#
# h	minutes		start_dst					end_dst						  # name
# oid	int		zrule						zrule						  # type
#-------------------------------------------------------------------------------------------------------------------------#
[ 0@0,	  0,		  nil,						  nil						  ]
[ 1@0,	  60,		  nil,						  nil						  ]
[ 2@0,	  60,		  nil,						  nil						  ]
[ 3@0,	  60,		  october 31@01:15,				  first wednesday on or after march 26@01:15	  ]
[ 4@0,	  0,		  17th monday from start of january@01:15,	  31th sunday from start of august@01:15	  ]
[ 5@0,	  -97,		  october 31@01:15,				  first thursday on or after april 31@01:15	  ]
[ 6@0,	  -97,		  may 26@01:15,					  22th tuesday from start of september@01:15	  ]
[ 7@0,	  1380,		  first thursday on or after april 31@01:15,	  first wednesday on or after november 22@01:15	  ]
[ 8@0,	  -1416,	  nil,						  nil						  ]
[ 9@0,	  0,		  nil,						  nil						  ]
[ 10@0,	  -60,		  nil,						  nil						  ]
[ 11@0,	  1439,		  nil,						  nil						  ]
[ 12@0,	  60,		  nil,						  nil						  ]
[ 13@0,	  nil,		  nil,						  nil						  ]
[ 14@0,	nil,	nil,	nil  ]

# 07:59:02 >  
# 07:59:02 >  Done.
# 07:59:02 >  

