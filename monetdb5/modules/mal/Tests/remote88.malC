# test octopus framework
#include sql;
# The script occassionally showed parallism errors.

module octopus;

function octopus.bind(v:int):bat[:int];
	b:= bat.new(:int);
	bat.append(b,v);
	return b;
end bind;

function octopus.bind(conn:str,v:int):bat[:int];
	vh:= remote.put(conn,v);
	b:= remote.put(conn,nil:bat[:int]);
	b:= remote.exec(conn,"octopus","bind",vh);
	bv:bat[:int]:= remote.get(conn,b);
	return bv;
end bind;

function octopus.tentacle(v:int, uri:str):bat[:int];
	conn:str := remote.connect(uri, "monetdb", "monetdb", "msql");
	b:= octopus.bind(conn,v);
catch RMTexception:str;
	io.print(RMTexception);
exit RMTexception;
	remote.disconnect(conn);
	return tentacle:=b;
end tentacle;

function octopus.exec(uri:str, query:str, version:int):bat[:int];
	conn:str := remote.connect(uri, "monetdb", "monetdb", "msql");
	m:= remote.put(conn,version);
	v:= remote.put(conn,nil:bat[:int]);
	u:= remote.put(conn,uri);
	# this works with uri, because head and tentacle are the same */
	v:= remote.exec(conn,"octopus", query, m, u);
	res:bat[:int]:= remote.get(conn,v);
	io.print(res);
	remote.disconnect(conn);
	return exec:=res;
end exec;

uri := sabaoth.getLocalConnectionURI();

barrier v:= 0:int;
	io.print(v);
barrier go:= language.dataflow();
	v1:bat[:int] :=octopus.exec(uri, "tentacle", v);
	v2:bat[:int] :=octopus.exec(uri, "tentacle", v);
	v3:bat[:int] :=octopus.exec(uri, "tentacle", v);
	v4:bat[:int] :=octopus.exec(uri, "tentacle", v);
	res:= mat.pack(v1,v2,v3,v4);
	language.pass(uri);
	language.pass(v);
exit go;
	redo v := iterator.next(1:int,25:int);
exit v;
z,n:=clients.getUsers();
io.print(z,n);
