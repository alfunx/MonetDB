stdout of test 'GCexample01` in directory 'monetdb5/optimizer` itself:


# 23:17:49 >  
# 23:17:49 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/monetdb5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5//Linux/lib/MonetDB5:/ufs/mk/monet5//Linux/lib/MonetDB5/lib:/ufs/mk/monet5//Linux/lib/MonetDB5/bin" --set "gdk_dbfarm=/ufs/mk/monet5//Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/sql_logs" --set "xquery_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/xquery_logs" --set mapi_port=33385 --set xrpc_port=42531 --set monet_prompt= --trace --dbname=mTests_src_optimizer  GCexample01.mal
# 23:17:49 >  

# MonetDB 5 server v11.22.0
# This is an unreleased version
# Serving database 'mTests_monetdb5_optimizer', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs and 128bit integers dynamically linked
# Found 15.589 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://vienna.da.cwi.nl:33343/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-8837/.s.monetdb.33343
# MonetDB/GIS module loaded
# Start processing logs sql/sql_logs version 52200
# Start reading the write-ahead log 'sql_logs/sql/log.4'
# Finished reading the write-ahead log 'sql_logs/sql/log.4'
# Finished processing logs sql/sql_logs
# MonetDB/SQL module loaded
# MonetDB/R   module loaded

Ready.

# 06:41:05 >  
# 06:41:05 >  "mclient" "-lmal" "-ftest" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-8837" "--port=33343"
# 06:41:05 >  

function user.qry():void;               	#[0] (0)  0 
    b:bat[:int] := bat.new(:oid,:int);  	#[1] (0) CMDBATnew 1 <- 2 3 
    c:bat[:int] := bat.new(:oid,:int);  	#[2] (0) CMDBATnew 4 <- 2 3 
    d:bat[:int] := bat.new(:oid,:int);  	#[3] (0) CMDBATnew 5 <- 2 3 
    bat.append(b:bat[:int],1:int);      	#[4] (0) BKCappend_val_wrap 6 <- 1 7 
barrier (x:oid,z:int) := iterator.new(b:bat[:int]);	#[5] (0) ITRbunIterator 8 9 <- 1 
    io.print(x:oid);                    	#[6] (0) IOprint_val 10 <- 8 
exit (x:oid,z:int);                     	#[7] (0)  8 9 
    b:bat[:int] := nil:bat[:int];       	#[8] (0)  1 <- 17 
barrier (x:oid,z:int) := iterator.new(c:bat[:int]);	#[9] (0) ITRbunIterator 8 9 <- 4 
    io.print(x:oid);                    	#[10] (0) IOprint_val 11 <- 8 
    redo (x:oid,z:int) := iterator.next(c:bat[:int]);	#[11] (0) ITRbunNext 8 9 <- 4 
exit (x:oid,z:int);                     	#[12] (0)  8 9 
    c:bat[:int] := nil:bat[:int];       	#[13] (0)  4 <- 19 
# do not close d, it may be reused 
barrier go:bit := true:bit;             	#[15] (0)  13 <- 14 
    io.print(d:bat[:int]);              	#[16] (0) IOprint_val 15 <- 5 
    redo go:bit := true:bit;            	#[17] (0)  13 <- 14 
exit go:bit;                            	#[18] (0)  13 
    d:bat[:int] := nil:bat[:int];       	#[19] (0)  5 <- 21 
end user.qry;                           	#[20] (0)  
function user.qry():void;               	#[0] (0)  0 
    b:bat[:int] := bat.new(:oid,:int);  	#[1] (0) CMDBATnew 1 <- 2 3 
    c:bat[:int] := bat.new(:oid,:int);  	#[2] (0) CMDBATnew 4 <- 2 3 
    d:bat[:int] := bat.new(:oid,:int);  	#[3] (0) CMDBATnew 5 <- 2 3 
    bat.append(b:bat[:int],1:int);      	#[4] (0) BKCappend_val_wrap 6 <- 1 7 
barrier (x:oid,z:int) := iterator.new(b:bat[:int]);	#[5] (0) ITRbunIterator 8 9 <- 1 
    io.print(x:oid);                    	#[6] (0) IOprint_val 10 <- 8 
exit (x:oid,z:int);                     	#[7] (0)  8 9 
    b:bat[:int] := nil:bat[:int];       	#[8] (0)  1 <- 17 
barrier (x:oid,z:int) := iterator.new(c:bat[:int]);	#[9] (0) ITRbunIterator 8 9 <- 4 
    io.print(x:oid);                    	#[10] (0) IOprint_val 11 <- 8 
    redo (x:oid,z:int) := iterator.next(c:bat[:int]);	#[11] (0) ITRbunNext 8 9 <- 4 
exit (x:oid,z:int);                     	#[12] (0)  8 9 
    c:bat[:int] := nil:bat[:int];       	#[13] (0)  4 <- 19 
# do not close d, it may be reused      
barrier go:bit := true:bit;             	#[15] (0)  13 <- 14 
    io.print(d:bat[:int]);              	#[16] (0) IOprint_val 15 <- 5 
    redo go:bit := true:bit;            	#[17] (0)  13 <- 14 
exit go:bit;                            	#[18] (0)  13 
    d:bat[:int] := nil:bat[:int];       	#[19] (0)  5 <- 21 
end user.qry;                           	#[20] (0)  

# 23:17:49 >  
# 23:17:49 >  Done.
# 23:17:49 >  

