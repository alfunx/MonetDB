stdout of test 'manifold2` in directory 'monetdb5/optimizer` itself:


# 09:02:36 >  
# 09:02:36 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=33759" "--set" "mapi_usock=/var/tmp/mtest-28130/.s.monetdb.33759" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/export/scratch1/mk/default//Linux/var/MonetDB/mTests_monetdb5_optimizer" "manifold2.mal"
# 09:02:36 >  

# MonetDB 5 server v11.20.0
# This is an unreleased version
# Serving database 'mTests_monetdb5_optimizer', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs and 128bit integers dynamically linked
# Found 15.590 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://vienna.ins.cwi.nl:33759/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-28130/.s.monetdb.33759
# MonetDB/GIS module loaded
# MonetDB/SQL module loaded
# MonetDB/R   module loaded

Ready.
#    z:bat[:dbl] := mal.multiplex("calc":str,"max":str,b:bat[:dbl],b2:bat[:dbl]);

# 12:52:57 >  
# 12:52:57 >  "mclient" "-lmal" "-ftest" "-Eutf-8" "--host=/var/tmp/mtest-23074" "--port=30414"
# 12:52:57 >  

function user.tst(b:bat[:dbl],b2:bat[:dbl]):void;	#[0] (0)  0 <- 1 2 
    c:wrd := aggr.count(b:bat[:dbl]);   	#[1] (0) ALGcount_bat 3 <- 1 
    c2:wrd := aggr.count(b2:bat[:dbl]); 	#[2] (0) ALGcount_bat 4 <- 2 
    X_9:bat[:dbl] := bat.new(nil:oid,nil:dbl);	#[3] (0) CMDBATnew 9 <- 10 11 
barrier (X_13:oid,X_14:dbl) := iterator.new(b:bat[:dbl]);	#[4] (0) ITRbunIterator 13 14 <- 1 
    X_16:dbl := algebra.fetch(b2:bat[:dbl],X_13:oid);	#[5] (0) ALGfetchoid 16 <- 2 13 
    X_18:dbl := calc.max(X_14:dbl,X_16:dbl);	#[6] (0) CALCmax 18 <- 14 16 
    bat.append(X_9:bat[:dbl],X_18:dbl); 	#[7] (0) BKCappend_val_wrap 19 <- 9 18 
    redo (X_13:oid,X_14:dbl) := iterator.next(b:bat[:dbl]);	#[8] (0) ITRbunNext 13 14 <- 1 
exit (X_13:oid,X_14:dbl);               	#[9] (0)  13 14 
    z:bat[:dbl] := X_9:bat[:dbl];       	#[10] (0)  5 <- 9 
    io.print(z:bat[:dbl],b:bat[:dbl],b2:bat[:dbl]);	#[11] (0) IOtable 8 <- 5 1 2 
end user.tst;                           	#[12] (0)  
#[1]     b =  :bat[:dbl]  
#[2]    b2 =  :bat[:dbl]  
#[5]     z =  :bat[:dbl]  
#[6]    _6 = "calc" :str  constant 
#[7]    _7 = "max" :str  constant 
#[9]    _9 =  :bat[:oid,:dbl]  
#[10]   _10 = nil :oid  constant 
#[11]   _11 = nil :dbl  constant 
#[13]   _13 =  :oid  
#[14]   _14 =  :dbl  
#[16]   _16 =  :dbl  
#[18]   _18 =  :dbl  
function user.tst(b:bat[:dbl],b2:bat[:dbl]):void;	#[0] (0)  0 <- 1 2 
    c:wrd := aggr.count(b:bat[:dbl]);   	#[1] (0) ALGcount_bat 3 <- 1 
    c2:wrd := aggr.count(b2:bat[:dbl]); 	#[2] (0) ALGcount_bat 4 <- 2 
    X_9:bat[:dbl] := bat.new(nil:oid,nil:dbl);	#[3] (0) CMDBATnew 9 <- 10 11 
barrier (X_13:oid,X_14:dbl) := iterator.new(b:bat[:dbl]);	#[4] (0) ITRbunIterator 13 14 <- 1 
    X_16:dbl := algebra.fetch(b2:bat[:dbl],X_13:oid);	#[5] (0) ALGfetchoid 16 <- 2 13 
    X_18:dbl := calc.max(X_14:dbl,X_16:dbl);	#[6] (0) CALCmax 18 <- 14 16 
    bat.append(X_9:bat[:dbl],X_18:dbl); 	#[7] (0) BKCappend_val_wrap 19 <- 9 18 
    redo (X_13:oid,X_14:dbl) := iterator.next(b:bat[:dbl]);	#[8] (0) ITRbunNext 13 14 <- 1 
exit (X_13:oid,X_14:dbl);               	#[9] (0)  13 14 
    z:bat[:dbl] := X_9:bat[:dbl];       	#[10] (0)  5 <- 9 
    io.print(z:bat[:dbl],b:bat[:dbl],b2:bat[:dbl]);	#[11] (0) IOtable 8 <- 5 1 2 
end user.tst;                           	#[12] (0)  

# 09:02:36 >  
# 09:02:36 >  "Done."
# 09:02:36 >  

