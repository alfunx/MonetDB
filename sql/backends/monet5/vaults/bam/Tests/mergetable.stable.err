stderr of test 'mergetable` in directory 'sql/backends/monet5/vaults/bam` itself:


# 08:29:32 >  
# 08:29:32 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=37321" "--set" "mapi_usock=/var/tmp/mtest-10986/.s.monetdb.37321" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/home/robin/MonetDB/PREFIX/var/MonetDB/mTests_sql_backends_monet5_bam" "--set" "mal_listing=0" "--set" "embedded_r=yes"
# 08:29:32 >  

# builtin opt 	gdk_dbpath = /home/robin/MonetDB/PREFIX/var/monetdb5/dbfarm/demo
# builtin opt 	gdk_debug = 0
# builtin opt 	gdk_vmtrim = no
# builtin opt 	monet_prompt = >
# builtin opt 	monet_daemon = no
# builtin opt 	mapi_port = 50000
# builtin opt 	mapi_open = false
# builtin opt 	mapi_autosense = false
# builtin opt 	sql_optimizer = default_pipe
# builtin opt 	sql_debug = 0
# cmdline opt 	gdk_nr_threads = 0
# cmdline opt 	mapi_open = true
# cmdline opt 	mapi_port = 37321
# cmdline opt 	mapi_usock = /var/tmp/mtest-10986/.s.monetdb.37321
# cmdline opt 	monet_prompt = 
# cmdline opt 	mal_listing = 2
# cmdline opt 	gdk_dbpath = /home/robin/MonetDB/PREFIX/var/MonetDB/mTests_sql_backends_monet5_bam
# cmdline opt 	mal_listing = 0
# cmdline opt 	embedded_r = yes
# cmdline opt 	gdk_debug = 536870922
# <bam_loader>: Loader started for 2 BAM files...
# # <bam_loader> Retrieving next file id...
# # <bam_loader> Initializing BAM wrapper for file '/home/robin/MonetDB/SOURCE/sql/backends/monet5/vaults/bam/Tests/files/file2.sam'...
# # <bam_loader> Initializing BAM wrapper for file '/home/robin/MonetDB/SOURCE/sql/backends/monet5/vaults/bam/Tests/files/file1.bam'...
# # <bam_loader> Parsing header for file '/home/robin/MonetDB/SOURCE/sql/backends/monet5/vaults/bam/Tests/files/file2.sam'...
# # <bam_loader> Parsing header for file '/home/robin/MonetDB/SOURCE/sql/backends/monet5/vaults/bam/Tests/files/file1.bam'...
# # <bam_loader> Creating alignment tables for file '/home/robin/MonetDB/SOURCE/sql/backends/monet5/vaults/bam/Tests/files/file2.sam'...
# # CREATE TABLE bam.alignments_1 ( 
# 		virtual_offset				BIGINT	  NOT NULL, 
# 		qname						 STRING	  NOT NULL, 
# 		flag						  SMALLINT	NOT NULL, 
# 		rname						 STRING	  NOT NULL, 
# 		pos						   INT		 NOT NULL, 
# 		mapq						  SMALLINT	NOT NULL, 
# 		cigar						 STRING	  NOT NULL, 
# 		rnext						 STRING	  NOT NULL, 
# 		pnext						 INT		 NOT NULL, 
# 		tlen						  INT		 NOT NULL, 
# 		seq						   STRING	  NOT NULL, 
# 		qual						  STRING	  NOT NULL, 
# 		CONSTRAINT alignments_1_pkey_virtual_offset PRIMARY KEY (virtual_offset) 
# 	); 
# 	
# 	CREATE TABLE bam.alignments_extra_1 ( 
# 		tag						   CHAR(2)	 NOT NULL, 
# 		virtual_offset				BIGINT	  NOT NULL, 
# 		type						  CHAR(1)	 NOT NULL, 
# 		value						 STRING, 
# 		CONSTRAINT alignments_extra_1_pkey_tag_virtual_offset PRIMARY KEY (tag, virtual_offset), 
# 		CONSTRAINT alignments_extra_1_fkey_virtual_offset FOREIGN KEY (virtual_offset) 
# 			REFERENCES bam.alignments_1 (virtual_offset) 
# 	);
# # <bam_loader> Creating alignment tables for file '/home/robin/MonetDB/SOURCE/sql/backends/monet5/vaults/bam/Tests/files/file1.bam'...
# # CREATE TABLE bam.alignments_2 ( 
# 		virtual_offset				BIGINT	  NOT NULL, 
# 		qname						 STRING	  NOT NULL, 
# 		flag						  SMALLINT	NOT NULL, 
# 		rname						 STRING	  NOT NULL, 
# 		pos						   INT		 NOT NULL, 
# 		mapq						  SMALLINT	NOT NULL, 
# 		cigar						 STRING	  NOT NULL, 
# 		rnext						 STRING	  NOT NULL, 
# 		pnext						 INT		 NOT NULL, 
# 		tlen						  INT		 NOT NULL, 
# 		seq						   STRING	  NOT NULL, 
# 		qual						  STRING	  NOT NULL, 
# 		CONSTRAINT alignments_2_pkey_virtual_offset PRIMARY KEY (virtual_offset) 
# 	); 
# 	
# 	CREATE TABLE bam.alignments_extra_2 ( 
# 		tag						   CHAR(2)	 NOT NULL, 
# 		virtual_offset				BIGINT	  NOT NULL, 
# 		type						  CHAR(1)	 NOT NULL, 
# 		value						 STRING, 
# 		CONSTRAINT alignments_extra_2_pkey_tag_virtual_offset PRIMARY KEY (tag, virtual_offset), 
# 		CONSTRAINT alignments_extra_2_fkey_virtual_offset FOREIGN KEY (virtual_offset) 
# 			REFERENCES bam.alignments_2 (virtual_offset) 
# 	);
# # <bam_loader> Creating reader threads...
# # <Thread 0> Starting on next file...
# # <Thread 0> Processing alignments of file '/home/robin/MonetDB/SOURCE/sql/backends/monet5/vaults/bam/Tests/files/file2.sam' (file id 1)...
# # <Thread 1> Starting on next file...
# # <Thread 1> Processing alignments of file '/home/robin/MonetDB/SOURCE/sql/backends/monet5/vaults/bam/Tests/files/file1.bam' (file id 2)...
# # <bam_loader> Waiting for reader threads to finish...
# # <Thread 2> Starting on next file...
# # <Thread 2> No files left to work on; thread done
# # <Thread 3> Starting on next file...
# # <Thread 3> No files left to work on; thread done
# # <Thread 1> All alignments in file '/home/robin/MonetDB/SOURCE/sql/backends/monet5/vaults/bam/Tests/files/file1.bam' (file id 2) processed!
# # <Thread 1> Starting on next file...
# # <Thread 1> No files left to work on; thread done
# # <Thread 0> All alignments in file '/home/robin/MonetDB/SOURCE/sql/backends/monet5/vaults/bam/Tests/files/file2.sam' (file id 1) processed!
# # <Thread 0> Starting on next file...
# # <Thread 0> No files left to work on; thread done
# # <bam_loader> Copying data into DB...
# # COPY BINARY INTO bam.files FROM ('bam_binaries/1/files_0', 'bam_binaries/1/files_1', 'bam_binaries/1/files_2', 'bam_binaries/1/files_3', 'bam_binaries/1/files_4', 'bam_binaries/1/files_5');
# COPY BINARY INTO bam.sq	FROM ('bam_binaries/1/sq_0', 'bam_binaries/1/sq_1', 'bam_binaries/1/sq_2', 'bam_binaries/1/sq_3', 'bam_binaries/1/sq_4', 'bam_binaries/1/sq_5', 'bam_binaries/1/sq_6');
# COPY BINARY INTO bam.pg	FROM ('bam_binaries/1/pg_0', 'bam_binaries/1/pg_1', 'bam_binaries/1/pg_2', 'bam_binaries/1/pg_3', 'bam_binaries/1/pg_4', 'bam_binaries/1/pg_5');
# COPY BINARY INTO bam.alignments_1 FROM 	('bam_binaries/1/alignments_0', 'bam_binaries/1/alignments_1', 'bam_binaries/1/alignments_2', 'bam_binaries/1/alignments_3', 'bam_binaries/1/alignments_4', 'bam_binaries/1/alignments_5', 'bam_binaries/1/alignments_6', 'bam_binaries/1/alignments_7', 'bam_binaries/1/alignments_8', 'bam_binaries/1/alignments_9', 'bam_binaries/1/alignments_10', 'bam_binaries/1/alignments_11');
# COPY BINARY INTO bam.alignments_extra_1 FROM ('bam_binaries/1/alignments_extra_0', 'bam_binaries/1/alignments_extra_1', 'bam_binaries/1/alignments_extra_2', 'bam_binaries/1/alignments_extra_3');
# 
# # COPY BINARY INTO bam.files FROM ('bam_binaries/2/files_0', 'bam_binaries/2/files_1', 'bam_binaries/2/files_2', 'bam_binaries/2/files_3', 'bam_binaries/2/files_4', 'bam_binaries/2/files_5');
# COPY BINARY INTO bam.sq	FROM ('bam_binaries/2/sq_0', 'bam_binaries/2/sq_1', 'bam_binaries/2/sq_2', 'bam_binaries/2/sq_3', 'bam_binaries/2/sq_4', 'bam_binaries/2/sq_5', 'bam_binaries/2/sq_6');
# COPY BINARY INTO bam.pg	FROM ('bam_binaries/2/pg_0', 'bam_binaries/2/pg_1', 'bam_binaries/2/pg_2', 'bam_binaries/2/pg_3', 'bam_binaries/2/pg_4', 'bam_binaries/2/pg_5');
# COPY BINARY INTO bam.alignments_2 FROM 	('bam_binaries/2/alignments_0', 'bam_binaries/2/alignments_1', 'bam_binaries/2/alignments_2', 'bam_binaries/2/alignments_3', 'bam_binaries/2/alignments_4', 'bam_binaries/2/alignments_5', 'bam_binaries/2/alignments_6', 'bam_binaries/2/alignments_7', 'bam_binaries/2/alignments_8', 'bam_binaries/2/alignments_9', 'bam_binaries/2/alignments_10', 'bam_binaries/2/alignments_11');
# COPY BINARY INTO bam.alignments_extra_2 FROM ('bam_binaries/2/alignments_extra_0', 'bam_binaries/2/alignments_extra_1', 'bam_binaries/2/alignments_extra_2', 'bam_binaries/2/alignments_extra_3');
# 
# # <bam_loader>: Loader finished processing 2 BAM files...
# 
# 08:29:32 >  
# 08:29:32 >  "/usr/bin/python2" "mergetable.SQL.py" "mergetable"
# 08:29:32 >  

MAPI  = (monetdb) /var/tmp/mtest-17563/.s.monetdb.34280
QUERY = SELECT COUNT(*) FROM alignments;
ERROR = !MERGE or REPLICA TABLE should have at least one table associated

# 18:59:22 >  
# 18:59:22 >  "Done."
# 18:59:22 >  

# 08:29:33 >  
# 08:29:33 >  "Done."
# 08:29:33 > 
