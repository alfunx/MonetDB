stdout of test '11-explain` in directory 'sql/benchmarks/tpch` itself:


# 22:53:27 >  
# 22:53:27 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=34581" "--set" "mapi_usock=/var/tmp/mtest-9096/.s.monetdb.34581" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/manegold/_/Monet/HG/Feb2013/prefix/--disable-debug_--enable-assert_--enable-optimize/var/MonetDB/mTests_sql_benchmarks_tpch" "--set" "mal_listing=0"
# 22:53:27 >  

# MonetDB 5 server v11.15.12
# This is an unreleased version
# Serving database 'mTests_sql_benchmarks_tpch', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.591 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://rome.ins.cwi.nl:34581/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-9096/.s.monetdb.34581
# MonetDB/GIS module loaded
# MonetDB/JAQL module loaded
# MonetDB/SQL module loaded

Ready.

# 22:53:28 >  
# 22:53:28 >  "/usr/bin/python2" "11-explain.SQL.py" "11-explain"
# 22:53:28 >  

#set optimizer = 'sequential_pipe';
#explain select
#	ps_partkey,
#	sum(ps_supplycost * ps_availqty) as value
#from
#	partsupp,
#	supplier,
#	nation
#where
#	ps_suppkey = s_suppkey
#	and s_nationkey = n_nationkey
#	and n_name = 'GERMANY'
#group by
#	ps_partkey 
#having
#	sum(ps_supplycost * ps_availqty) >
#	(
#		select
#			sum(ps_supplycost * ps_availqty) * 0.0100000000
#			-- The above constant needs to be adjusted according
#			-- to the scale factor (SF): constant = 0.0001 / SF.
#		from
#			partsupp,
#			supplier,
#			nation
#		where
#			ps_suppkey = s_suppkey
#			and s_nationkey = n_nationkey
% .explain # table_name
% mal # name
% clob # type
% 562 # length
function user.s2_1(A0:str,A1:sht,A2:str):void;
    X_128:void := querylog.define("explain select\n ps_partkey,\n sum(ps_supplycost * ps_availqty) as value\nfrom\n partsupp,\n supplier,\n nation\nwhere\n ps_suppkey = s_suppkey\n and s_nationkey = n_nationkey\n and n_name = \\'GERMANY\\'\ngroup by\n ps_partkey having\n sum(ps_supplycost * ps_availqty) > (\n select\n sum(ps_supplycost * ps_availqty) * 0.0100000000\n \n \n \n from\n partsupp,\n supplier,\n nation\n where\n ps_suppkey = s_suppkey\n and s_nationkey = n_nationkey\n and n_name = \\'GERMANY\\'\n )\norder by\n value desc;","sequential_pipe",84);
    X_4 := sql.mvc();
    C_5:bat[:oid] := sql.tid(X_4,"sys","supplier");
    X_8:bat[:oid] := sql.bind_idxbat(X_4,"sys","supplier","supplier_s_nationkey_fkey",0);
    (X_11,r1_11) := sql.bind_idxbat(X_4,"sys","supplier","supplier_s_nationkey_fkey",2);
    X_14:bat[:oid] := sql.bind_idxbat(X_4,"sys","supplier","supplier_s_nationkey_fkey",1);
    X_16 := sql.delta(X_8,X_11,r1_11,X_14);
    X_17 := algebra.projection(C_5,X_16);
    C_18:bat[:oid] := sql.tid(X_4,"sys","nation");
    X_20:bat[:str] := sql.bind(X_4,"sys","nation","n_name",0);
    (C_22,r1_22) := sql.bind(X_4,"sys","nation","n_name",2);
    X_24:bat[:str] := sql.bind(X_4,"sys","nation","n_name",1);
    X_25 := sql.delta(X_20,C_22,r1_22,X_24);
    X_26 := algebra.projection(C_18,X_25);
    C_79 := algebra.subselect(X_26,A2,A2,true,false,false);
    X_80 := algebra.projection(C_79,C_18);
    (X_81,r1_111) := algebra.subjoin(X_17,X_80,nil:BAT,nil:BAT,false,nil:lng);
    X_83 := algebra.projection(X_81,C_5);
    C_36:bat[:oid] := sql.tid(X_4,"sys","partsupp");
    X_38:bat[:oid] := sql.bind_idxbat(X_4,"sys","partsupp","partsupp_ps_suppkey_fkey",0);
    (X_40,r1_43) := sql.bind_idxbat(X_4,"sys","partsupp","partsupp_ps_suppkey_fkey",2);
    X_42:bat[:oid] := sql.bind_idxbat(X_4,"sys","partsupp","partsupp_ps_suppkey_fkey",1);
    X_43 := sql.delta(X_38,X_40,r1_43,X_42);
    X_44 := algebra.projection(C_36,X_43);
    (X_84,r1_125) := algebra.subjoin(X_83,X_44,nil:BAT,nil:BAT,false,nil:lng);
    X_60:bat[:lng] := sql.bind(X_4,"sys","partsupp","ps_supplycost",0);
    (C_62,r1_67) := sql.bind(X_4,"sys","partsupp","ps_supplycost",2);
    X_64:bat[:lng] := sql.bind(X_4,"sys","partsupp","ps_supplycost",1);
    X_65 := sql.delta(X_60,C_62,r1_67,X_64);
    X_66 := algebra.projection(C_36,X_65);
    X_86 := algebra.projection(r1_125,X_66);
    X_69:bat[:int] := sql.bind(X_4,"sys","partsupp","ps_availqty",0);
    (C_71,r1_80) := sql.bind(X_4,"sys","partsupp","ps_availqty",2);
    X_73:bat[:int] := sql.bind(X_4,"sys","partsupp","ps_availqty",1);
    X_74 := sql.delta(X_69,C_71,r1_80,X_73);
    X_75 := algebra.projection(C_36,X_74);
    X_87 := algebra.projection(r1_125,X_75);
    X_88:bat[:hge] := batcalc.*(X_86,X_87);
    X_89:hge := aggr.sum(X_88);
    X_90:hge := calc.*(X_89,A1);
    C_27 := algebra.subselect(X_26,A0,A0,true,false,false);
    X_30 := algebra.projection(C_27,C_18);
    (X_31,r1_33) := algebra.subjoin(X_17,X_30,nil:BAT,nil:BAT,false,nil:lng);
    X_35 := algebra.projection(X_31,C_5);
    (X_45,r1_48) := algebra.subjoin(X_35,X_44,nil:BAT,nil:BAT,false,nil:lng);
    X_67 := algebra.projection(r1_48,X_66);
    X_76 := algebra.projection(r1_48,X_75);
    X_77:bat[:hge] := batcalc.*(X_67,X_76);
    X_47:bat[:int] := sql.bind(X_4,"sys","partsupp","ps_partkey",0);
    (C_49,r1_52) := sql.bind(X_4,"sys","partsupp","ps_partkey",2);
    X_51:bat[:int] := sql.bind(X_4,"sys","partsupp","ps_partkey",1);
    X_52 := sql.delta(X_47,C_49,r1_52,X_51);
    X_53:bat[:int] := algebra.projectionpath(r1_48,C_36,X_52);
    (X_54,r1_58,r2_58) := group.subgroupdone(X_53);
    X_57 := algebra.projection(r1_58,X_53);
    X_78:bat[:hge] := aggr.subsum(X_77,X_54,r1_58,true,true);
    X_58 := bat.setKey(X_57,true);
    X_59 := bat.mirror(X_58);
    X_92:hge := sql.dec_round(X_90,100);
    X_104 := bat.new(nil:oid,nil:str);
    X_112 := bat.append(X_104,"sys.partsupp");
    X_120 := bat.append(X_112,"sys.L1");
    X_107 := bat.new(nil:oid,nil:str);
    X_114 := bat.append(X_107,"ps_partkey");
    X_122 := bat.append(X_114,"value");
    X_108 := bat.new(nil:oid,nil:str);
    X_115 := bat.append(X_108,"int");
    X_124 := bat.append(X_115,"decimal");
    X_109 := bat.new(nil:oid,nil:int);
    X_117 := bat.append(X_109,32);
    X_126 := bat.append(X_117,39);
    X_111 := bat.new(nil:oid,nil:int);
    X_119 := bat.append(X_111,0);
    X_127 := bat.append(X_119,2);
    X_93 := sql.single(X_92);
    (X_94,r1_155) := algebra.subthetajoin(X_78,X_93,nil:BAT,nil:BAT,1,true,nil:lng);
    C_96 := algebra.subinter(X_59,X_94,nil:BAT,nil:BAT,false,nil:lng);
    X_97 := algebra.projection(C_96,X_78);
    (X_98,r1_165,r2_165) := algebra.subsort(X_97,true,false);
    X_101:bat[:int] := algebra.projectionpath(r1_165,C_96,X_58);
    X_102 := algebra.projection(r1_165,X_97);
    sql.resultSet(X_120,X_122,X_124,X_126,X_127,X_101,X_102);
end user.s2_1;

# 22:53:28 >  
# 22:53:28 >  "Done."
# 22:53:28 >  

