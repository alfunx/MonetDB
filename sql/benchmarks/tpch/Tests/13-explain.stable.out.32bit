stdout of test '13-explain` in directory 'sql/benchmarks/tpch` itself:


# 22:53:28 >  
# 22:53:28 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=34581" "--set" "mapi_usock=/var/tmp/mtest-9096/.s.monetdb.34581" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/manegold/_/Monet/HG/Feb2013/prefix/--disable-debug_--enable-assert_--enable-optimize/var/MonetDB/mTests_sql_benchmarks_tpch" "--set" "mal_listing=0"
# 22:53:28 >  

# MonetDB 5 server v11.15.12
# This is an unreleased version
# Serving database 'mTests_sql_benchmarks_tpch', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.591 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://rome.ins.cwi.nl:34581/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-9096/.s.monetdb.34581
# MonetDB/GIS module loaded
# MonetDB/JAQL module loaded
# MonetDB/SQL module loaded

Ready.

# 22:53:28 >  
# 22:53:28 >  "/usr/bin/python2" "13-explain.SQL.py" "13-explain"
# 22:53:28 >  

#set optimizer = 'sequential_pipe';
#explain select
#	c_count,
#	count(*) as custdist
#from
#	(
#		select
#			c_custkey,
#			count(o_orderkey)
#		from
#			customer left outer join orders on
#				c_custkey = o_custkey
#				and o_comment not like '%special%requests%'
#		group by
#			c_custkey
#	) as c_orders (c_custkey, c_count)
#group by
#	c_count
#order by
#	custdist desc,
#	c_count desc;
% .explain # table_name
% mal # name
% clob # type
% 400 # length
function user.s2_1(A0:str):void;
    X_102:void := querylog.define("explain select\n c_count,\n count(*) as custdist\nfrom\n (\n select\n c_custkey,\n count(o_orderkey)\n from\n customer left outer join orders on\n c_custkey = o_custkey\n and o_comment not like \\'%special%requests%\\'\n group by\n c_custkey\n ) as c_orders (c_custkey, c_count)\ngroup by\n c_count\norder by\n custdist desc,\n c_count desc;","sequential_pipe",66);
    X_80 := bat.new(nil:oid,nil:str);
    X_86 := bat.append(X_80,".c_orders");
    X_95 := bat.append(X_86,".L2");
    X_82 := bat.new(nil:oid,nil:str);
    X_88 := bat.append(X_82,"c_count");
    X_97 := bat.append(X_88,"custdist");
    X_83 := bat.new(nil:oid,nil:str);
    X_90 := bat.append(X_83,"wrd");
    X_99 := bat.append(X_90,"wrd");
    X_84 := bat.new(nil:oid,nil:int);
    X_92 := bat.append(X_84,32);
    X_100 := bat.append(X_92,32);
    X_85 := bat.new(nil:oid,nil:int);
    X_94 := bat.append(X_85,0);
    X_101 := bat.append(X_94,0);
    X_3:bat[:int] := bat.new(nil:oid,nil:int);
    X_2 := sql.mvc();
    C_6:bat[:oid] := sql.tid(X_2,"sys","customer");
    C_9:bat[:oid] := sql.tid(X_2,"sys","orders");
    X_11:bat[:oid] := sql.bind_idxbat(X_2,"sys","orders","orders_o_custkey_fkey",0);
    (X_14,r1_14) := sql.bind_idxbat(X_2,"sys","orders","orders_o_custkey_fkey",2);
    X_17:bat[:oid] := sql.bind_idxbat(X_2,"sys","orders","orders_o_custkey_fkey",1);
    X_19 := sql.delta(X_11,X_14,r1_14,X_17);
    X_20 := algebra.projection(C_9,X_19);
    (X_21,r1_21) := algebra.subjoin(C_6,X_20,nil:BAT,nil:BAT,false,nil:lng);
    X_26:bat[:str] := sql.bind(X_2,"sys","orders","o_comment",0);
    (C_28,r1_29) := sql.bind(X_2,"sys","orders","o_comment",2);
    X_30:bat[:str] := sql.bind(X_2,"sys","orders","o_comment",1);
    X_31 := sql.delta(X_26,C_28,r1_29,X_30);
    X_32:bat[:str] := algebra.projectionpath(r1_21,C_9,X_31);
    C_34 := algebra.likesubselect(X_32,nil:BAT,A0,"",true);
    X_36:bat[:int] := sql.bind(X_2,"sys","orders","o_orderkey",0);
    (C_38,r1_43) := sql.bind(X_2,"sys","orders","o_orderkey",2);
    X_40:bat[:int] := sql.bind(X_2,"sys","orders","o_orderkey",1);
    X_41 := sql.delta(X_36,C_38,r1_43,X_40);
    X_42:bat[:int] := algebra.projectionpath(C_34,r1_21,C_9,X_41);
    X_43 := bat.append(X_3,X_42,true);
    X_44:bat[:int] := sql.bind(X_2,"sys","customer","c_custkey",0);
    (C_46,r1_52) := sql.bind(X_2,"sys","customer","c_custkey",2);
    X_48:bat[:int] := sql.bind(X_2,"sys","customer","c_custkey",1);
    X_49 := sql.delta(X_44,C_46,r1_52,X_48);
    X_50 := algebra.projection(C_6,X_49);
    X_51 := bat.mirror(X_50);
    X_52 := algebra.projection(C_34,X_21);
    X_53 := algebra.subdiff(X_51,X_52,nil:BAT,nil:BAT,false,nil:lng);
    X_54 := algebra.project(X_53,nil:int);
    X_55 := bat.append(X_43,X_54,true);
    X_56:bat[:int] := bat.new(nil:oid,nil:int);
    X_57 := algebra.projection(X_52,X_50);
    X_58 := bat.append(X_56,X_57,true);
    X_59 := algebra.projection(X_53,X_50);
    X_60 := bat.append(X_58,X_59,true);
    (X_61,r1_75,r2_75) := group.subgroupdone(X_60);
    X_64:bat[:wrd] := aggr.subcount(X_55,X_61,r1_75,true);
    (X_65,r1_79,r2_79) := group.subgroupdone(X_64);
    X_68 := algebra.projection(r1_79,X_64);
    X_70:bat[:wrd] := aggr.subcount(X_65,X_65,r1_79,false);
    X_69 := bat.setKey(X_68,true);
    (X_71,r1_85,r2_85) := algebra.subsort(X_70,true,false);
    (X_74,r1_88,r2_88) := algebra.subsort(X_69,r1_85,r2_85,true,false);
    X_77 := algebra.projection(r1_88,X_69);
    X_78 := algebra.projection(r1_88,X_70);
    sql.resultSet(X_95,X_97,X_99,X_100,X_101,X_77,X_78);
end user.s2_1;

# 22:53:28 >  
# 22:53:28 >  "Done."
# 22:53:28 >  

