stdout of test '16-explain` in directory 'sql/benchmarks/tpch` itself:


# 22:53:29 >  
# 22:53:29 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=34581" "--set" "mapi_usock=/var/tmp/mtest-9096/.s.monetdb.34581" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/manegold/_/Monet/HG/Feb2013/prefix/--disable-debug_--enable-assert_--enable-optimize/var/MonetDB/mTests_sql_benchmarks_tpch" "--set" "mal_listing=0"
# 22:53:29 >  

# MonetDB 5 server v11.15.12
# This is an unreleased version
# Serving database 'mTests_sql_benchmarks_tpch', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.591 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://rome.ins.cwi.nl:34581/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-9096/.s.monetdb.34581
# MonetDB/GIS module loaded
# MonetDB/JAQL module loaded
# MonetDB/SQL module loaded

Ready.

# 22:53:29 >  
# 22:53:29 >  "/usr/bin/python2" "16-explain.SQL.py" "16-explain"
# 22:53:29 >  

#set optimizer = 'sequential_pipe';
#explain select
#	p_brand,
#	p_type,
#	p_size,
#	count(distinct ps_suppkey) as supplier_cnt
#from
#	partsupp,
#	part
#where
#	p_partkey = ps_partkey
#	and p_brand <> 'Brand#45'
#	and p_type not like 'MEDIUM POLISHED%'
#	and p_size in (49, 14, 23, 45, 19, 3, 36, 9)
#	and ps_suppkey not in (
#		select
#			s_suppkey
#		from
#			supplier
#		where
#			s_comment like '%Customer%Complaints%'
#	)
#group by
#	p_brand,
#	p_type,
#	p_size
#order by
#	supplier_cnt desc,
#	p_brand,
#	p_type,
#	p_size;
% .explain # table_name
% mal # name
% clob # type
% 555 # length
function user.s2_1(A0:str,A1:str,A2:int,A3:int,A4:int,A5:int,A6:int,A7:int,A8:int,A9:int,A10:str):void;
    X_190:void := querylog.define("explain select\n p_brand,\n p_type,\n p_size,\n count(distinct ps_suppkey) as supplier_cnt\nfrom\n partsupp,\n part\nwhere\n p_partkey = ps_partkey\n and p_brand <> \\'Brand#45\\'\n and p_type not like \\'MEDIUM POLISHED%\\'\n and p_size in (49, 14, 23, 45, 19, 3, 36, 9)\n and ps_suppkey not in (\n select\n s_suppkey\n from\n supplier\n where\n s_comment like \\'%Customer%Complaints%\\'\n )\ngroup by\n p_brand,\n p_type,\n p_size\norder by\n supplier_cnt desc,\n p_brand,\n p_type,\n p_size;","sequential_pipe",118);
    X_152 := bat.new(nil:oid,nil:str);
    X_160 := bat.append(X_152,"sys.part");
    X_168 := bat.append(X_160,"sys.part");
    X_175 := bat.append(X_168,"sys.part");
    X_182 := bat.append(X_175,"sys.L4");
    X_155 := bat.new(nil:oid,nil:str);
    X_162 := bat.append(X_155,"p_brand");
    X_169 := bat.append(X_162,"p_type");
    X_176 := bat.append(X_169,"p_size");
    X_184 := bat.append(X_176,"supplier_cnt");
    X_156 := bat.new(nil:oid,nil:str);
    X_163 := bat.append(X_156,"char");
    X_170 := bat.append(X_163,"varchar");
    X_177 := bat.append(X_170,"int");
    X_186 := bat.append(X_177,"wrd");
    X_157 := bat.new(nil:oid,nil:int);
    X_165 := bat.append(X_157,10);
    X_172 := bat.append(X_165,25);
    X_179 := bat.append(X_172,32);
    X_188 := bat.append(X_179,32);
    X_159 := bat.new(nil:oid,nil:int);
    X_167 := bat.append(X_159,0);
    X_174 := bat.append(X_167,0);
    X_181 := bat.append(X_174,0);
    X_189 := bat.append(X_181,0);
    X_12 := sql.mvc();
    C_13:bat[:oid] := sql.tid(X_12,"sys","partsupp");
    X_16:bat[:int] := sql.bind(X_12,"sys","partsupp","ps_suppkey",0);
    (C_19,r1_19) := sql.bind(X_12,"sys","partsupp","ps_suppkey",2);
    X_22:bat[:int] := sql.bind(X_12,"sys","partsupp","ps_suppkey",1);
    X_24 := sql.delta(X_16,C_19,r1_19,X_22);
    X_25 := algebra.projection(C_13,X_24);
    X_26 := bat.mirror(X_25);
    C_27:bat[:oid] := sql.tid(X_12,"sys","supplier");
    X_29:bat[:str] := sql.bind(X_12,"sys","supplier","s_comment",0);
    (C_31,r1_31) := sql.bind(X_12,"sys","supplier","s_comment",2);
    X_33:bat[:str] := sql.bind(X_12,"sys","supplier","s_comment",1);
    X_34 := sql.delta(X_29,C_31,r1_31,X_33);
    X_35 := algebra.projection(C_27,X_34);
    C_37 := algebra.likesubselect(X_35,nil:BAT,A10,"",false);
    X_40:bat[:int] := sql.bind(X_12,"sys","supplier","s_suppkey",0);
    (C_42,r1_44) := sql.bind(X_12,"sys","supplier","s_suppkey",2);
    X_44:bat[:int] := sql.bind(X_12,"sys","supplier","s_suppkey",1);
    X_45 := sql.delta(X_40,C_42,r1_44,X_44);
    X_46:bat[:int] := algebra.projectionpath(C_37,C_27,X_45);
    (X_47,r1_50) := algebra.subjoin(X_25,X_46,nil:BAT,nil:BAT,false,nil:lng);
    X_50 := algebra.subdiff(X_26,X_47,nil:BAT,nil:BAT,false,nil:lng);
    X_51:bat[:oid] := sql.bind_idxbat(X_12,"sys","partsupp","partsupp_ps_partkey_fkey",0);
    (X_53,r1_56) := sql.bind_idxbat(X_12,"sys","partsupp","partsupp_ps_partkey_fkey",2);
    X_55:bat[:oid] := sql.bind_idxbat(X_12,"sys","partsupp","partsupp_ps_partkey_fkey",1);
    X_56 := sql.delta(X_51,X_53,r1_56,X_55);
    X_57:bat[:oid] := algebra.projectionpath(X_50,C_13,X_56);
    C_58:bat[:oid] := sql.tid(X_12,"sys","part");
    X_60:bat[:int] := sql.bind(X_12,"sys","part","p_size",0);
    (C_62,r1_66) := sql.bind(X_12,"sys","part","p_size",2);
    X_64:bat[:int] := sql.bind(X_12,"sys","part","p_size",1);
    X_65 := sql.delta(X_60,C_62,r1_66,X_64);
    X_66 := algebra.projection(C_58,X_65);
    X_67:bat[:str] := sql.bind(X_12,"sys","part","p_type",0);
    (C_69,r1_74) := sql.bind(X_12,"sys","part","p_type",2);
    X_71:bat[:str] := sql.bind(X_12,"sys","part","p_type",1);
    X_72 := sql.delta(X_67,C_69,r1_74,X_71);
    X_73 := algebra.projection(C_58,X_72);
    X_74:bat[:str] := sql.bind(X_12,"sys","part","p_brand",0);
    (C_76,r1_84) := sql.bind(X_12,"sys","part","p_brand",2);
    X_78:bat[:str] := sql.bind(X_12,"sys","part","p_brand",1);
    X_79 := sql.delta(X_74,C_76,r1_84,X_78);
    X_80 := algebra.projection(C_58,X_79);
    C_81 := algebra.subselect(X_80,A0,A0,true,true,true);
    C_83 := algebra.likesubselect(X_73,C_81,A1,"",true);
    C_84 := algebra.subselect(X_66,C_83,A2,A2,true,false,false);
    C_85 := algebra.subselect(X_66,C_83,A3,A3,true,false,false);
    X_86 := bat.mergecand(C_84,C_85);
    C_87 := algebra.subselect(X_66,C_83,A4,A4,true,false,false);
    X_88 := bat.mergecand(X_86,C_87);
    C_89 := algebra.subselect(X_66,C_83,A5,A5,true,false,false);
    X_90 := bat.mergecand(X_88,C_89);
    C_91 := algebra.subselect(X_66,C_83,A6,A6,true,false,false);
    X_92 := bat.mergecand(X_90,C_91);
    C_93 := algebra.subselect(X_66,C_83,A7,A7,true,false,false);
    X_94 := bat.mergecand(X_92,C_93);
    C_95 := algebra.subselect(X_66,C_83,A8,A8,true,false,false);
    X_96 := bat.mergecand(X_94,C_95);
    C_97 := algebra.subselect(X_66,C_83,A9,A9,true,false,false);
    X_98 := bat.mergecand(X_96,C_97);
    X_99 := algebra.projection(X_98,C_58);
    (X_100,r1_119) := algebra.subjoin(X_57,X_99,nil:BAT,nil:BAT,false,nil:lng);
    X_102:bat[:str] := algebra.projectionpath(r1_119,X_98,X_73);
    X_103:bat[:int] := algebra.projectionpath(r1_119,X_98,X_66);
    X_104:bat[:int] := algebra.projectionpath(X_100,X_50,X_25);
    X_105:bat[:str] := algebra.projectionpath(r1_119,X_98,X_80);
    (X_106,r1_132,r2_132) := group.subgroup(X_105);
    (X_109,r1_135,r2_135) := group.subgroup(X_104,X_106);
    (X_112,r1_138,r2_138) := group.subgroup(X_103,X_109);
    (X_115,r1_141,r2_141) := group.subgroupdone(X_102,X_112);
    X_118 := algebra.projection(r1_141,X_102);
    X_119 := algebra.projection(r1_141,X_103);
    X_120 := algebra.projection(r1_141,X_105);
    X_133 := algebra.projection(r1_141,X_104);
    (X_121,r1_147,r2_147) := group.subgroup(X_120);
    (X_124,r1_150,r2_150) := group.subgroup(X_119,X_121);
    (X_127,r1_153,r2_153) := group.subgroupdone(X_118,X_124);
    X_130 := algebra.projection(r1_153,X_119);
    X_131 := algebra.projection(r1_153,X_118);
    X_132 := algebra.projection(r1_153,X_120);
    X_134:bat[:wrd] := aggr.subcount(X_133,X_127,r1_153,true);
    (X_135,r1_162,r2_162) := algebra.subsort(X_134,true,false);
    (X_138,r1_166,r2_166) := algebra.subsort(X_132,r1_162,r2_162,false,false);
    (X_141,r1_169,r2_169) := algebra.subsort(X_131,r1_166,r2_166,false,false);
    (X_144,r1_172,r2_172) := algebra.subsort(X_130,r1_169,r2_169,false,false);
    X_147 := algebra.projection(r1_172,X_132);
    X_148 := algebra.projection(r1_172,X_131);
    X_149 := algebra.projection(r1_172,X_130);
    X_150 := algebra.projection(r1_172,X_134);
    sql.resultSet(X_182,X_184,X_186,X_188,X_189,X_147,X_148,X_149,X_150);
end user.s2_1;

# 22:53:29 >  
# 22:53:29 >  "Done."
# 22:53:29 >  

