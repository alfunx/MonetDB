stdout of test '22-explain` in directory 'sql/benchmarks/tpch` itself:


# 22:53:31 >  
# 22:53:31 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=34581" "--set" "mapi_usock=/var/tmp/mtest-9096/.s.monetdb.34581" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/manegold/_/Monet/HG/Feb2013/prefix/--disable-debug_--enable-assert_--enable-optimize/var/MonetDB/mTests_sql_benchmarks_tpch" "--set" "mal_listing=0"
# 22:53:31 >  

# MonetDB 5 server v11.15.12
# This is an unreleased version
# Serving database 'mTests_sql_benchmarks_tpch', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.591 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://rome.ins.cwi.nl:34581/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-9096/.s.monetdb.34581
# MonetDB/GIS module loaded
# MonetDB/JAQL module loaded
# MonetDB/SQL module loaded

Ready.

# 22:53:31 >  
# 22:53:31 >  "/usr/bin/python2" "22-explain.SQL.py" "22-explain"
# 22:53:31 >  

#set optimizer = 'sequential_pipe';
#explain select
#	cntrycode,
#	count(*) as numcust,
#	sum(c_acctbal) as totacctbal
#from
#	(
#		select
#			substring(c_phone from 1 for 2) as cntrycode,
#			c_acctbal
#		from
#			customer
#		where
#			substring(c_phone from 1 for 2) in
#				('13', '31', '23', '29', '30', '18', '17')
#			and c_acctbal > (
#				select
#					avg(c_acctbal)
#				from
#					customer
#				where
#					c_acctbal > 0.00
#					and substring(c_phone from 1 for 2) in
#						('13', '31', '23', '29', '30', '18', '17')
#			)
#			and not exists (
#				select
#					*
% .explain # table_name
% mal # name
% clob # type
% 710 # length
function user.s2_1(A0:int,A1:int,A2:int,A3:int,A4:str,A5:str,A6:str,A7:str,A8:str,A9:str,A10:str,A11:bte,A12:int,A13:int,A14:str,A15:str,A16:str,A17:str,A18:str,A19:str,A20:str):void;
    X_161:void := querylog.define("explain select\n cntrycode,\n count(*) as numcust,\n sum(c_acctbal) as totacctbal\nfrom\n (\n select\n substring(c_phone from 1 for 2) as cntrycode,\n c_acctbal\n from\n customer\n where\n substring(c_phone from 1 for 2) in\n (\\'13\\', \\'31\\', \\'23\\', \\'29\\', \\'30\\', \\'18\\', \\'17\\')\n and c_acctbal > (\n select\n avg(c_acctbal)\n from\n customer\n where\n c_acctbal > 0.00\n and substring(c_phone from 1 for 2) in\n (\\'13\\', \\'31\\', \\'23\\', \\'29\\', \\'30\\', \\'18\\', \\'17\\')\n )\n and not exists (\n select\n *\n from\n orders\n where\n o_custkey = c_custkey\n )\n ) as custsale\ngroup by\n cntrycode\norder by\n cntrycode;","sequential_pipe",102);
    X_127 := bat.new(nil:oid,nil:str);
    X_135 := bat.append(X_127,"sys.custsale");
    X_143 := bat.append(X_135,"sys.L2");
    X_152 := bat.append(X_143,"sys.L3");
    X_130 := bat.new(nil:oid,nil:str);
    X_137 := bat.append(X_130,"cntrycode");
    X_145 := bat.append(X_137,"numcust");
    X_154 := bat.append(X_145,"totacctbal");
    X_131 := bat.new(nil:oid,nil:str);
    X_139 := bat.append(X_131,"char");
    X_147 := bat.append(X_139,"wrd");
    X_156 := bat.append(X_147,"decimal");
    X_132 := bat.new(nil:oid,nil:int);
    X_141 := bat.append(X_132,15);
    X_149 := bat.append(X_141,64);
    X_158 := bat.append(X_149,39);
    X_134 := bat.new(nil:oid,nil:int);
    X_142 := bat.append(X_134,0);
    X_151 := bat.append(X_142,0);
    X_160 := bat.append(X_151,2);
    X_22 := sql.mvc();
    C_23:bat[:oid] := sql.tid(X_22,"sys","customer");
    X_26:bat[:str] := sql.bind(X_22,"sys","customer","c_phone",0);
    (C_29,r1_29) := sql.bind(X_22,"sys","customer","c_phone",2);
    X_32:bat[:str] := sql.bind(X_22,"sys","customer","c_phone",1);
    X_34 := sql.delta(X_26,C_29,r1_29,X_32);
    X_35 := algebra.projection(C_23,X_34);
    X_36:bat[:str] := batstr.substring(X_35,A2,A3);
    C_37 := algebra.subselect(X_36,A4,A4,true,false,false);
    C_40 := algebra.subselect(X_36,A5,A5,true,false,false);
    X_41 := bat.mergecand(C_37,C_40);
    C_42 := algebra.subselect(X_36,A6,A6,true,false,false);
    X_43 := bat.mergecand(X_41,C_42);
    C_44 := algebra.subselect(X_36,A7,A7,true,false,false);
    X_45 := bat.mergecand(X_43,C_44);
    C_46 := algebra.subselect(X_36,A8,A8,true,false,false);
    X_47 := bat.mergecand(X_45,C_46);
    C_48 := algebra.subselect(X_36,A9,A9,true,false,false);
    X_49 := bat.mergecand(X_47,C_48);
    C_50 := algebra.subselect(X_36,A10,A10,true,false,false);
    X_51 := bat.mergecand(X_49,C_50);
    X_52:bat[:int] := sql.bind(X_22,"sys","customer","c_custkey",0);
    (C_54,r1_66) := sql.bind(X_22,"sys","customer","c_custkey",2);
    X_56:bat[:int] := sql.bind(X_22,"sys","customer","c_custkey",1);
    X_57 := sql.delta(X_52,C_54,r1_66,X_56);
    X_58:bat[:int] := algebra.projectionpath(X_51,C_23,X_57);
    X_59 := bat.mirror(X_58);
    X_60:bat[:lng] := sql.bind(X_22,"sys","customer","c_acctbal",0);
    (C_62,r1_75) := sql.bind(X_22,"sys","customer","c_acctbal",2);
    X_64:bat[:lng] := sql.bind(X_22,"sys","customer","c_acctbal",1);
    X_65 := sql.delta(X_60,C_62,r1_75,X_64);
    X_66 := algebra.projection(C_23,X_65);
    X_67 := algebra.projection(X_51,X_66);
    X_68:bat[:dbl] := batcalc.dbl(2,X_67);
    X_69:bat[:str] := batstr.substring(X_35,A12,A13);
    X_70 := calc.lng(1,A11,15,2);
    C_72 := algebra.thetasubselect(X_66,X_70,">");
    C_74 := algebra.subselect(X_69,C_72,A14,A14,true,false,false);
    C_75 := algebra.subselect(X_69,C_72,A15,A15,true,false,false);
    X_76 := bat.mergecand(C_74,C_75);
    C_77 := algebra.subselect(X_69,C_72,A16,A16,true,false,false);
    X_78 := bat.mergecand(X_76,C_77);
    C_79 := algebra.subselect(X_69,C_72,A17,A17,true,false,false);
    X_80 := bat.mergecand(X_78,C_79);
    C_81 := algebra.subselect(X_69,C_72,A18,A18,true,false,false);
    X_82 := bat.mergecand(X_80,C_81);
    C_83 := algebra.subselect(X_69,C_72,A19,A19,true,false,false);
    X_84 := bat.mergecand(X_82,C_83);
    C_85 := algebra.subselect(X_69,C_72,A20,A20,true,false,false);
    X_86 := bat.mergecand(X_84,C_85);
    X_87 := algebra.projection(X_86,X_66);
    X_88:bat[:dbl] := batcalc.dbl(2,X_87);
    X_89:dbl := aggr.avg(X_88);
    X_90 := sql.single(X_89);
    (X_91,r1_140) := algebra.subthetajoin(X_68,X_90,nil:BAT,nil:BAT,1,true,nil:lng);
    C_95 := algebra.subinter(X_59,X_91,nil:BAT,nil:BAT,false,nil:lng);
    X_96 := algebra.projection(C_95,X_58);
    X_97 := bat.mirror(X_96);
    C_98:bat[:oid] := sql.tid(X_22,"sys","orders");
    X_100:bat[:int] := sql.bind(X_22,"sys","orders","o_custkey",0);
    (C_102,r1_155) := sql.bind(X_22,"sys","orders","o_custkey",2);
    X_104:bat[:int] := sql.bind(X_22,"sys","orders","o_custkey",1);
    X_105 := sql.delta(X_100,C_102,r1_155,X_104);
    X_106 := algebra.projection(C_98,X_105);
    (X_107,r1_160) := algebra.subjoin(X_96,X_106,nil:BAT,nil:BAT,false,nil:lng);
    X_109 := algebra.subdiff(X_97,X_107,nil:BAT,nil:BAT,false,nil:lng);
    X_110:bat[:str] := algebra.projectionpath(X_109,C_95,X_51,X_35);
    X_111:bat[:str] := batstr.substring(X_110,A0,A1);
    (X_112,r1_171,r2_171) := group.subgroupdone(X_111);
    X_115 := algebra.projection(r1_171,X_111);
    X_121:bat[:wrd] := aggr.subcount(X_112,X_112,r1_171,false);
    X_123:bat[:lng] := algebra.projectionpath(X_109,C_95,X_67);
    X_124:bat[:hge] := aggr.subsum(X_123,X_112,r1_171,true,true);
    X_116 := bat.setKey(X_115,true);
    (X_117,r1_176,r2_176) := algebra.subsort(X_116,false,false);
    X_120 := algebra.projection(r1_176,X_116);
    X_122 := algebra.projection(r1_176,X_121);
    X_125 := algebra.projection(r1_176,X_124);
    sql.resultSet(X_152,X_154,X_156,X_158,X_160,X_120,X_122,X_125);
end user.s2_1;

# 22:53:31 >  
# 22:53:31 >  "Done."
# 22:53:31 >  

