stdout of test 'crash_on_alias.Bug-2798` in directory 'sql/test/BugTracker-2011` itself:


# 14:09:56 >  
# 14:09:56 >   mserver5  --debug=10 --set gdk_nr_threads=0  --set "gdk_dbfarm=/net/volund.ins.cwi.nl/export/scratch0/fabian/vtmp/mtest-Apr2011-volund.ins.cwi.nl/sql/dbfarm" --set mapi_open=true --set mapi_port=31436 --set monet_prompt= --trace --forcemito --set mal_listing=2  "--dbname=mTests_test_BugTracker-2011" --set mal_listing=0 ; echo ; echo Over..
# 14:09:56 >  

# MonetDB 5 server v11.3.1 "Apr2011-f9a21e4aaff7"
# Serving database 'mTests_test_BugTracker-2011', using 4 threads
# Compiled for x86_64-pc-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 7.749 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://monetdb.cwi.nl/ for further information
# Listening for connection requests on mapi:monetdb://volund.ins.cwi.nl:31436/
# MonetDB/GIS module loaded
# MonetDB/SQL module loaded

Ready.


# 14:09:56 >  
# 14:09:56 >  mclient -lsql -ftest -i -e --host=volund --port=31436 
# 14:09:56 >  

#START TRANSACTION;
#CREATE TABLE dbg (a INT, b INT);
#INSERT INTO dbg (a,b) VALUES (10,10);
[ 1	]
#plan SELECT a as d, SUM(b), (2 * (SUM(b) / (SELECT 2))) as f FROM dbg GROUP BY d;
% .plan # table_name
% rel # name
% clob # type
% 97 # length
project (
| group by (
| | table(sys.dbg) [ dbg.a, dbg.b ] COUNT 
| ) [ dbg.a as d ] [ dbg.d, sys.sum no nil (dbg.b) as L1.L1, L1.L1 as L2.L2 ]
) [ dbg.d, L1 as L1.L1, sys.sql_mul(sys.sql_div(L2, tinyint "2" as L3.L3), tinyint "2") as L3.f ]
#set optimizer = 'sequential_pipe';
#explain SELECT a as d, SUM(b), (2 * (SUM(b) / (SELECT 2))) as f FROM dbg GROUP BY d;
% .explain # table_name
% mal # name
% clob # type
% 142 # length
function user.s4_1(A0:bte,A1:bte):void;
    X_57:void := querylog.define("explain select a as d, sum(b), (2 * (sum(b) / (select 2))) as f from dbg group by d;","sequential_pipe",36);
    X_24 := bat.new(nil:oid,nil:str);
    X_32 := bat.append(X_24,"sys.dbg");
    X_41 := bat.append(X_32,"sys.L1");
    X_50 := bat.append(X_41,"sys.L3");
    X_27 := bat.new(nil:oid,nil:str);
    X_34 := bat.append(X_27,"d");
    X_43 := bat.append(X_34,"L1");
    X_52 := bat.append(X_43,"f");
    X_28 := bat.new(nil:oid,nil:str);
    X_36 := bat.append(X_28,"int");
    X_45 := bat.append(X_36,"hugeint");
    X_54 := bat.append(X_45,"hugeint");
    X_29 := bat.new(nil:oid,nil:int);
    X_38 := bat.append(X_29,32);
    X_47 := bat.append(X_38,128);
    X_55 := bat.append(X_47,128);
    X_31 := bat.new(nil:oid,nil:int);
    X_40 := bat.append(X_31,0);
    X_49 := bat.append(X_40,0);
    X_56 := bat.append(X_49,0);
    X_3 := sql.mvc();
    C_4:bat[:oid] := sql.tid(X_3,"sys","dbg");
    X_7:bat[:int] := sql.bind(X_3,"sys","dbg","a",0);
    X_10 := algebra.projection(C_4,X_7);
    (X_11,r1_11,r2_11) := group.subgroupdone(X_10);
    X_14 := algebra.projection(r1_11,X_10);
    X_17:bat[:int] := sql.bind(X_3,"sys","dbg","b",0);
    X_19 := algebra.projection(C_4,X_17);
    X_20:bat[:hge] := aggr.subsum(X_19,X_11,r1_11,true,true);
    X_15 := bat.setKey(X_14,true);
    X_21:bat[:hge] := batcalc./(X_20,A1);
    X_22:bat[:hge] := batcalc.*(X_21,A0);
    sql.resultSet(X_50,X_52,X_54,X_55,X_56,X_15,X_20,X_22);
end user.s4_1;
#set optimizer = 'default_pipe';
#SELECT a as d, SUM(b), (2 * (SUM(b) / (SELECT 2))) as f FROM dbg GROUP BY d;
% sys.dbg,	sys.L1,	sys.L3 # table_name
% d,	L1,	f # name
% int,	hugeint,	hugeint # type
% 2,	2,	2 # length
[ 10,	10,	10	]
#ROLLBACK;
#START TRANSACTION;
#CREATE TABLE dbg (a INT, b INT);
#INSERT INTO dbg (a,b) VALUES (10,10);
[ 1	]
#plan SELECT a as d, SUM(b) as e, (2 * (SUM(b) / (SELECT 2))) as f FROM dbg GROUP BY d;
% .plan # table_name
% rel # name
% clob # type
% 96 # length
project (
| group by (
| | table(sys.dbg) [ dbg.a, dbg.b ] COUNT 
| ) [ dbg.a as d ] [ dbg.d, sys.sum no nil (dbg.b) as L1.L1, L1.L1 as L2.L2 ]
) [ dbg.d, L1 as L1.e, sys.sql_mul(sys.sql_div(L2, tinyint "2" as L3.L3), tinyint "2") as L3.f ]
#set optimizer = 'sequential_pipe';
#explain SELECT a as d, SUM(b) as e, (2 * (SUM(b) / (SELECT 2))) as f FROM dbg GROUP BY d;
% .explain # table_name
% mal # name
% clob # type
% 147 # length
function user.s10_1(A0:bte,A1:bte):void;
    X_57:void := querylog.define("explain select a as d, sum(b) as e, (2 * (sum(b) / (select 2))) as f from dbg group by d;","sequential_pipe",36);
    X_24 := bat.new(nil:oid,nil:str);
    X_32 := bat.append(X_24,"sys.dbg");
    X_41 := bat.append(X_32,"sys.L1");
    X_50 := bat.append(X_41,"sys.L3");
    X_27 := bat.new(nil:oid,nil:str);
    X_34 := bat.append(X_27,"d");
    X_43 := bat.append(X_34,"e");
    X_52 := bat.append(X_43,"f");
    X_28 := bat.new(nil:oid,nil:str);
    X_36 := bat.append(X_28,"int");
    X_45 := bat.append(X_36,"hugeint");
    X_54 := bat.append(X_45,"hugeint");
    X_29 := bat.new(nil:oid,nil:int);
    X_38 := bat.append(X_29,32);
    X_47 := bat.append(X_38,128);
    X_55 := bat.append(X_47,128);
    X_31 := bat.new(nil:oid,nil:int);
    X_40 := bat.append(X_31,0);
    X_49 := bat.append(X_40,0);
    X_56 := bat.append(X_49,0);
    X_3 := sql.mvc();
    C_4:bat[:oid] := sql.tid(X_3,"sys","dbg");
    X_7:bat[:int] := sql.bind(X_3,"sys","dbg","a",0);
    X_10 := algebra.projection(C_4,X_7);
    (X_11,r1_11,r2_11) := group.subgroupdone(X_10);
    X_14 := algebra.projection(r1_11,X_10);
    X_17:bat[:int] := sql.bind(X_3,"sys","dbg","b",0);
    X_19 := algebra.projection(C_4,X_17);
    X_20:bat[:hge] := aggr.subsum(X_19,X_11,r1_11,true,true);
    X_15 := bat.setKey(X_14,true);
    X_21:bat[:hge] := batcalc./(X_20,A1);
    X_22:bat[:hge] := batcalc.*(X_21,A0);
    sql.resultSet(X_50,X_52,X_54,X_55,X_56,X_15,X_20,X_22);
end user.s10_1;
#set optimizer = 'default_pipe';
#SELECT a as d, SUM(b) as e, (2 * (SUM(b) / (SELECT 2))) as f FROM dbg GROUP
#BY d;
% sys.dbg,	sys.L1,	sys.L3 # table_name
% d,	e,	f # name
% int,	hugeint,	hugeint # type
% 2,	2,	2 # length
[ 10,	10,	10	]

# 14:09:56 >  
# 14:09:56 >  Done.
# 14:09:56 >  

